{"version":3,"sources":["../../../src/routes/usersApi.js"],"names":["usersRouter","express","Router","post","req","res","datastructure","app","get","body","email","password","dob","fullName","length","user","users","filter","u","status","json","error","push","payload","token","jwt","sign","expiresIn","setHeader","message","Object","assign","undefined","params","id","put","reminderDate","reminder"],"mappings":"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","file":"usersApi.js","sourcesContent":["import express from 'express';\nimport jwt from 'jsonwebtoken';\n\nconst usersRouter = express.Router();\n\nusersRouter.post('/users', (req, res) => {\n\tconst datastructure = req.app.get('appData');\n\tconst {\n\t\temail, password, dob, fullName,\n\t} = req.body;\n\tif (email && dob && fullName && password) {\n\t\tif (email.length > 0 && dob.length > 0 && fullName.length > 0 && password.length >= 6) {\n\t\t\tconst user = datastructure.users.filter(u => u.email === email && u.password === password);\n\t\t\tif (user.length > 0 && user[0].email) {\n\t\t\t\tres.status(409).json({ error: 'This email has already been taken!' });\n\t\t\t} else {\n\t\t\t\tdatastructure.users.push(req.body);\n\t\t\t\tconst payload = {\n\t\t\t\t\temail: req.body.email,\n\t\t\t\t};\n\t\t\t\tconst token = jwt.sign(payload, '1357389', { expiresIn: 60000 });\n\t\t\t\tres.setHeader('token', token);\n\t\t\t\tres.status(201).json({ message: 'You have successfully signed up' });\n\t\t\t}\n\t\t} else {\n\t\t\tres.status(422).json({ message: 'Please fill in all the fields properly!' });\n\t\t}\n\t} else {\n\t\tres.status(400).json({ message: 'Invalid Request!' });\n\t}\n});\n\nusersRouter.post('/users/signin', (req, res) => {\n\tconst datastructure = req.app.get('appData');\n\tconst { email, password } = req.body;\n\tif (email.length > 0 && password.length > 0) {\n\t\tlet user = datastructure.users.filter(u => u.email === email && u.password === password);\n\t\tif (user.length > 0 && user[0].email) {\n\t\t\tconst payload = {\n\t\t\t\temail: user.email,\n\t\t\t};\n\t\t\tuser = Object.assign({}, user[0]);\n\t\t\tdelete user.password;\n\t\t\tconst token = jwt.sign(payload, 'djdkdldmldkldm', { expiresIn: 60000 });\n\t\t\tres.setHeader('token', token);\n\t\t\tres.status(200).json({ message: 'You have successfully signed in', user });\n\t\t} else {\n\t\t\tres.status(401).json({ message: 'Cannot log in' });\n\t\t}\n\t} else {\n\t\tres.status(400).json({ message: 'Invalid request' });\n\t}\n});\n\nusersRouter.get('/users/:id', (req, res) => {\n\tconst datastructure = req.app.get('appData');\n\tif (datastructure.users === undefined || datastructure.users[req.params.id] === undefined) {\n\t\tres.status(404).json({ error: 'This user does not exist' });\n\t} else {\n\t\tconst user = datastructure.users[req.params.id];\n\t\tres.status(200).json(user);\n\t}\n});\n\nusersRouter.put('/users/:id', (req, res) => {\n\tconst datastructure = req.app.get('appData');\n\tif (!req.body.email || !req.body.fullName || !req.body.dob) {\n\t\tres.status(400).json({ message: 'Invalid request' });\n\t}\n\tif (req.body.email < 1 || req.body.fullName < 1 || req.body.dob < 1) {\n\t\tres.status(422).json({ message: 'Please fill in all the fields properly!' });\n\t}\n\tif (datastructure.users === undefined || datastructure.users[req.params.id] === undefined) {\n\t\tres.status(404).json({ error: 'This user does not exist' });\n\t}\n\tdatastructure.users[req.params.id].email = req.body.email;\n\tdatastructure.users[req.params.id].fullName = req.body.fullName;\n\tdatastructure.users[req.params.id].dob = req.body.dob;\n\tres.status(200).json({ message: 'User Profile has been updated' });\n});\n\nusersRouter.put('/users/:id/notifications', (req, res) => {\n\tconst datastructure = req.app.get('appData');\n\tif (!req.body.reminderDate) {\n\t\tres.status(400).json({ message: 'Invalid request' });\n\t}\n\tif (req.body.reminderDate < 1) {\n\t\tres.status(422).json({ message: 'Please pick a date for your notification!' });\n\t}\n\tif (datastructure.users === undefined || datastructure.users[req.params.id] === undefined) {\n\t\tres.status(404).json({ error: 'This user does not exist' });\n\t}\n\tdatastructure.users[req.params.id].reminder = req.body.reminderDate;\n\tres.status(200).json({ message: 'Your notification settings has been updated' });\n});\n\nexport default usersRouter;\n"]}